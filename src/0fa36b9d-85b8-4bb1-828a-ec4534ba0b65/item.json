{
    "system_name": "AbstractEvent",
    "guid": "0fa36b9d-85b8-4bb1-828a-ec4534ba0b65",
    "description": "This class implements the base Event object used system-wide to offer orthogonality. Core objects such as Models,\r\nControllers, etc create such events on-the-fly and dispatch them through the application's Dispatcher (colloquially\r\nknown as the \"Joomla! plugin system\"). This way a suitable plugin, typically a \"system\" plugin, can modify the\r\nbehaviour of any internal class, providing system-wide services such as tags, content versioning, comments or even\r\nlow-level services such as the implementation of created\/modified\/locked behaviours, record hit counter etc.\r\n\r\nYou can create a new Event with something like this:\r\n\r\n$event = AbstractEvent::create('onModelBeforeSomething', $myModel, $arguments);\r\n\r\nYou can access the subject object from your event Listener using $event['subject']. It is up to your listener to\r\ndetermine whether it should apply its functionality against the subject.\r\n\r\nThis AbstractEvent class implements a mutable event which is allowed to change its arguments at runtime. This is\r\ngenerally unadvisable. It's best to use AbstractImmutableEvent instead and constrict all your interaction to the\r\nsubject class.",
    "settings": {
        "settings0": {
            "namespace": "Joomla\\CMS\\Event\\AbstractEvent",
            "joomla_version": "0"
        },
        "settings1": {
            "namespace": "Error\/Not\/For\/Joomla\/Three",
            "joomla_version": "3"
        }
    }
}